// Copyright (c) 2015 K Team. All Rights Reserved.
// Represents the grammar accepted by the Debugger TUI.

options {
  STATIC = false;
  UNICODE_INPUT = true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(DebuggerCommandParser)

package org.kframework.utils.debugparser;

import java.io.StringReader;
import java.io.Reader;
import java.util.Optional;
import org.kframework.krun.modes.DebugMode.Command;

import static org.kframework.krun.modes.DebugMode.Commands.*;

public class DebuggerCommandParser {
    public static Command parseCommand(String command) throws NumberFormatException, ParseException
    {
        DebuggerCommandParser parser = new DebuggerCommandParser(new StringReader(command));
        return parser.parseCommand();
    }

}
PARSER_END(DebuggerCommandParser)

/** Skip these characters, they are considered "white space" **/
SKIP :
{
    " "
    | "\t"
    | "\r"
}


TOKEN: /*RESERVED TOKENS */
{
       <STEP: (["s", "S"])| "step" >
    |  <BACKSTEP:  (["b", "B"])| "back-step">
    |  <JUMPTO: (["j", "J"])| "jump-to">
    |  <QUIT: "quit" | "abort" | "exit">
    |  <CHECKPOINT: "checkpoint" | "ch">
    |  <RESUME: "resume" | "run" | "r">
    |  <PEEK: "p" | "peek">
    |  <NUMBER: (["0" - "9"])+>
    |  <STRING : (["a" - "z", "A"-"Z", "0"-"9"])+ >
    |  <NEWLINE : "\n" | "\r\n">

}


Command command() throws NumberFormatException:
{
    int stepCount = 1;
    Integer stateNum = null;
    Integer configurationNum = null;
    int checkpointVal;
}
{
        <STEP> (stepCount = parseNum())? {return new StepCommand(stepCount);}
    |   <PEEK> {return new PeekCommand();}
    |   <BACKSTEP> (stepCount = parseNum())? {return new BackStepCommand(stepCount);}
    |   LOOKAHEAD(3)
        <JUMPTO> (stateNum = parseNum()) (configurationNum = parseNum()) {return new JumpToCommand(Optional.of(stateNum), Optional.of(configurationNum));}
    |   <JUMPTO> (configurationNum = parseNum())? {return new JumpToCommand(Optional.ofNullable(stateNum), Optional.ofNullable(configurationNum));}
    |   <QUIT> {return new QuitCommand();}
    |   <RESUME> {return new ResumeCommand();}
    |   <CHECKPOINT> (checkpointVal = parseNum()){return new CheckpointCommand(checkpointVal);}
}

Command parseCommand() throws NumberFormatException:
{
    Command command;
}
{
    command = command() ((<NEWLINE>)+ | (<EOF>)) {return command;}
}


int parseNum() throws NumberFormatException:
{
    Token t;
}
{
    t = <NUMBER>
    {return Integer.parseInt(t.image);}
}
